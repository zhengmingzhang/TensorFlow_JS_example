{"id":"node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js","dependencies":[{"name":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js.map","includedInParent":true,"mtime":1600477931733},{"name":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/node_modules/@tensorflow/tfjs-core/src/ops/gather_nd.ts","includedInParent":true,"mtime":1600477931733},{"name":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/package.json","includedInParent":true,"mtime":1600863268825},{"name":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/node_modules/@tensorflow/tfjs-core/package.json","includedInParent":true,"mtime":1600477931733},{"name":"../engine","loc":{"line":17,"column":23},"parent":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js","resolved":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/node_modules/@tensorflow/tfjs-core/dist/engine.js"},{"name":"../tensor_util_env","loc":{"line":18,"column":32},"parent":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js","resolved":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js"},{"name":"./operation","loc":{"line":19,"column":19},"parent":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/node_modules/@tensorflow/tfjs-core/dist/ops/gather_nd.js","resolved":"/Users/zhangzhengming/Desktop/tensorflowjs/人工智能启蒙（中）/L1.5/node_modules/@tensorflow/tfjs-core/dist/ops/operation.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gatherND = void 0;\n\nvar _engine = require(\"../engine\");\n\nvar _tensor_util_env = require(\"../tensor_util_env\");\n\nvar _operation = require(\"./operation\");\n\n/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Gather slices from input tensor into a Tensor with shape specified by\n * `indices`.\n *\n * `indices` is an K-dimensional integer tensor, best thought of as a\n * (K-1)-dimensional tensor of indices into input, where each element defines a\n * slice of input:\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\n *\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\n * of input, where N = indices.shape[-1].\n *\n * The last dimension of indices can be at most the rank of input:\n * indices.shape[-1] <= input.rank\n *\n * The last dimension of `indices` corresponds to elements\n * (if indices.shape[-1] == input.rank) or slices\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\n * input.\n * The output tensor has shape\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\n *\n * Note that on CPU, if an out of bound index is found, an error is returned. On\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\n * output value.\n *\n * ```js\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\n * tf.gatherND(input, indices).print() // [10, 11]\n * ```\n *\n * @param x The tensor from which to gather values.\n * @param indices Index tensor, must be of type int32.\n */\n\n/** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */\nfunction gatherND_(x, indices) {\n  const $indices = (0, _tensor_util_env.convertToTensor)(indices, 'indices', 'gatherND', 'int32');\n  const $x = (0, _tensor_util_env.convertToTensor)(x, 'x', 'gatherND');\n  return _engine.ENGINE.runKernelFunc(backend => backend.gatherND($x, $indices), {\n    x: $x,\n    indices: $indices\n  }, null\n  /* backward */\n  , 'GatherNd');\n}\n\nconst gatherND = (0, _operation.op)({\n  gatherND_\n});\nexports.gatherND = gatherND;","map":{"mappings":[{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":14,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":31,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":68,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":60,"column":0},"generated":{"line":69,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":60,"column":9},"generated":{"line":69,"column":9}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":60,"column":0},"generated":{"line":69,"column":18}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":60,"column":19},"generated":{"line":69,"column":19}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":60,"column":0},"generated":{"line":69,"column":20}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":60,"column":41},"generated":{"line":69,"column":22}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":60,"column":0},"generated":{"line":69,"column":29}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":60,"column":67},"generated":{"line":69,"column":31}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":2},"generated":{"line":70,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":8},"generated":{"line":70,"column":8}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":16},"generated":{"line":70,"column":16}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":19},"generated":{"line":70,"column":19}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":35},"generated":{"line":70,"column":57}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":19},"generated":{"line":70,"column":64}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":44},"generated":{"line":70,"column":66}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":19},"generated":{"line":70,"column":75}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":55},"generated":{"line":70,"column":77}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":19},"generated":{"line":70,"column":87}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":67},"generated":{"line":70,"column":89}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":19},"generated":{"line":70,"column":96}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":61,"column":2},"generated":{"line":70,"column":97}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":2},"generated":{"line":71,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":8},"generated":{"line":71,"column":8}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":10},"generated":{"line":71,"column":10}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":13},"generated":{"line":71,"column":13}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":29},"generated":{"line":71,"column":51}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":13},"generated":{"line":71,"column":52}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":32},"generated":{"line":71,"column":54}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":13},"generated":{"line":71,"column":57}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":37},"generated":{"line":71,"column":59}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":13},"generated":{"line":71,"column":69}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":62,"column":2},"generated":{"line":71,"column":70}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":72,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":72,"column":9}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":16},"generated":{"line":72,"column":24}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":72,"column":37}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":6},"generated":{"line":72,"column":38}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":13},"generated":{"line":72,"column":45}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":17},"generated":{"line":72,"column":49}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":24},"generated":{"line":72,"column":56}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":25},"generated":{"line":72,"column":57}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":17},"generated":{"line":72,"column":65}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":34},"generated":{"line":72,"column":66}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":17},"generated":{"line":72,"column":68}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":38},"generated":{"line":72,"column":70}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":17},"generated":{"line":72,"column":78}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":72,"column":79}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":49},"generated":{"line":72,"column":81}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":50},"generated":{"line":73,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":50},"generated":{"line":73,"column":4}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":51},"generated":{"line":73,"column":5}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":53},"generated":{"line":73,"column":7}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":49},"generated":{"line":73,"column":9}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":74,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":74,"column":4}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":64},"generated":{"line":74,"column":11}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":66},"generated":{"line":74,"column":13}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":64,"column":49},"generated":{"line":75,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":75,"column":3}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":6},"generated":{"line":75,"column":5}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":11},"generated":{"line":76,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":77,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":65,"column":27},"generated":{"line":77,"column":4}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":9},"generated":{"line":77,"column":14}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":63,"column":2},"generated":{"line":77,"column":15}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":78,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":7},"generated":{"line":80,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":13},"generated":{"line":80,"column":6}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":21},"generated":{"line":80,"column":14}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":80,"column":17}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":27},"generated":{"line":80,"column":36}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":28},"generated":{"line":81,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":28},"generated":{"line":81,"column":2}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":27},"generated":{"line":82,"column":0}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":24},"generated":{"line":82,"column":1}},{"source":"../../src/ops/gather_nd.ts","name":null,"original":{"line":67,"column":7},"generated":{"line":82,"column":2}}],"sources":{"../../src/ops/gather_nd.ts":"/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {op} from './operation';\n\n/**\n * Gather slices from input tensor into a Tensor with shape specified by\n * `indices`.\n *\n * `indices` is an K-dimensional integer tensor, best thought of as a\n * (K-1)-dimensional tensor of indices into input, where each element defines a\n * slice of input:\n * output[\\\\(i_0, ..., i_{K-2}\\\\)] = input[indices[\\\\(i_0, ..., i_{K-2}\\\\)]]\n *\n * Whereas in `tf.gather`, `indices` defines slices into the first dimension of\n * input, in `tf.gatherND`, `indices` defines slices into the first N dimensions\n * of input, where N = indices.shape[-1].\n *\n * The last dimension of indices can be at most the rank of input:\n * indices.shape[-1] <= input.rank\n *\n * The last dimension of `indices` corresponds to elements\n * (if indices.shape[-1] == input.rank) or slices\n * (if indices.shape[-1] < input.rank) along dimension indices.shape[-1] of\n * input.\n * The output tensor has shape\n * indices.shape[:-1] + input.shape[indices.shape[-1]:]\n *\n * Note that on CPU, if an out of bound index is found, an error is returned. On\n * GPU, if an out of bound index is found, a 0 is stored in the corresponding\n * output value.\n *\n * ```js\n * const indices = tf.tensor2d([0, 1, 1, 0], [2,2], 'int32');\n * const input = tf.tensor2d([9, 10, 11, 12], [2, 2]);\n * tf.gatherND(input, indices).print() // [10, 11]\n * ```\n *\n * @param x The tensor from which to gather values.\n * @param indices Index tensor, must be of type int32.\n */\n/** @doc {heading: 'Operations', subheading: 'Slicing and Joining'} */\nfunction gatherND_(x: Tensor|TensorLike, indices: Tensor|TensorLike): Tensor {\n  const $indices = convertToTensor(indices, 'indices', 'gatherND', 'int32');\n  const $x = convertToTensor(x, 'x', 'gatherND');\n  return ENGINE.runKernelFunc(\n      backend => backend.gatherND($x, $indices), {x: $x, indices: $indices},\n      null /* backward */, 'GatherNd');\n}\nexport const gatherND = op({gatherND_});\n"},"lineCount":null}},"hash":"063ca87dd937b7574c73ca8a6448964a","cacheData":{"env":{}}}